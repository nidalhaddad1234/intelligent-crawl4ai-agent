services:
  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:0.6.3
    container_name: intelligent_crawl4ai_chromadb
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    volumes:
      - chromadb_data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session management and job queuing
  redis:
    image: redis:7-alpine
    container_name: intelligent_crawl4ai_redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15
    container_name: intelligent_crawl4ai_postgres
    environment:
      - POSTGRES_DB=intelligent_scraping
      - POSTGRES_USER=scraper_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scraper_user -d intelligent_scraping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Browser Pool 1 - Primary
  browser-pool-1:
    image: browserless/chrome:latest
    container_name: intelligent_crawl4ai_browser_1
    ports:
      - "3001:3000"
    environment:
      - CONCURRENT=20
      - TOKEN=browser_token_1
      - ENABLE_DEBUGGER=false
      - MAX_CONCURRENT_SESSIONS=20
      - PREBOOT_CHROME=true
      - KEEP_ALIVE=true
      - DEFAULT_BLOCK_ADS=true
      - DEFAULT_IGNORE_HTTPS_ERRORS=true
      - DEFAULT_STEALTH=true
      - CONNECTION_TIMEOUT=120000
      - MAX_QUEUE_LENGTH=100
    shm_size: 2gb
    networks:
      - ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Browser Pool 2 - Secondary
  browser-pool-2:
    image: browserless/chrome:latest
    container_name: intelligent_crawl4ai_browser_2
    ports:
      - "3002:3000"
    environment:
      - CONCURRENT=20
      - TOKEN=browser_token_2
      - ENABLE_DEBUGGER=false
      - MAX_CONCURRENT_SESSIONS=20
      - PREBOOT_CHROME=true
      - KEEP_ALIVE=true
      - DEFAULT_BLOCK_ADS=true
      - DEFAULT_IGNORE_HTTPS_ERRORS=true
      - DEFAULT_STEALTH=true
      - CONNECTION_TIMEOUT=120000
      - MAX_QUEUE_LENGTH=100
    shm_size: 2gb
    networks:
      - ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # 🌐 Web UI Server - ChatGPT-like Interface (Updated with Enhanced Logging)
  web-ui:
    image: python:3.11-slim
    command: >
      bash -c "
      echo '🚀 Starting Web UI Server with Enhanced Logging...' &&
      
      # Fix Python/Debian package conflicts
      export DEBIAN_FRONTEND=noninteractive &&
      
      # Update packages with Python 3 preference
      apt-get update &&
      apt-get install -y --no-install-recommends curl gcc g++ python3-dev python3-pip &&
      
      echo '📦 Installing Python dependencies...' &&
      python3 -m pip install --no-cache-dir --upgrade pip &&
      python3 -m pip install --no-cache-dir -r requirements.txt &&
      
      echo '⏳ Waiting for dependent services...' &&
      sleep 10 &&
      
      echo '🔍 Verifying AI components...' &&
      python3 -c 'import ai_core.planner; print(\"✅ AI Planner loaded\")' || echo '❌ AI Planner failed' &&
      python3 -c 'import ai_core.registry; print(\"✅ Tool Registry loaded\")' || echo '❌ Tool Registry failed' &&
      
      echo '🌐 Starting Web UI Server with DEBUG logging...' &&
      python3 web_ui_server.py
      "
    container_name: intelligent_crawl4ai_web_ui
    working_dir: /app
    environment:
      - OLLAMA_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL=deepseek-coder:1.3b
      - CHROMADB_URL=http://chromadb:8000
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://scraper_user:secure_password_123@postgres:5432/intelligent_scraping
      - DATABASE_TYPE=postgresql
      - BROWSER_POOL_URLS=http://browser-pool-1:3000,http://browser-pool-2:3000
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8888
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app:/app/src
      - LOG_LEVEL=DEBUG
      - DEBUG=true
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ../../ai_core:/app/ai_core:ro
      - ../../src:/app/src:ro
      - ../../static:/app/static:ro
      - ../../data:/app/data
      - ../../web_ui_server_debug.py:/app/web_ui_server.py:ro
      - ../../requirements.txt:/app/requirements.txt:ro
      - ../../config:/app/config:ro
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ai_network
    ports:
      - "8888:8888"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 🔧 High-Volume Workers - Updated with Python 3
  high-volume-workers:
    image: python:3.11-slim
    command: >
      bash -c "
      echo '🔧 Starting High-Volume Workers...' &&
      export DEBIAN_FRONTEND=noninteractive &&
      apt-get update && apt-get install -y --no-install-recommends curl gcc g++ python3-dev python3-pip && 
      echo '📦 Installing dependencies...' &&
      python3 -m pip install --no-cache-dir --upgrade pip &&
      python3 -m pip install --no-cache-dir -r requirements.txt &&
      echo '⏳ Waiting for services...' &&
      sleep 15 &&
      echo '🚀 Starting worker executor...' &&
      python3 -m src.agents.high_volume_executor
      "
    working_dir: /app
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://scraper_user:secure_password_123@postgres:5432/intelligent_scraping
      - OLLAMA_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL=deepseek-coder:1.3b
      - CHROMADB_URL=http://chromadb:8000
      - BROWSER_POOL_URLS=http://browser-pool-1:3000,http://browser-pool-2:3000
      - MAX_WORKERS=50
      - MAX_CONCURRENT_PER_WORKER=10
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app:/app/src
      - LOG_LEVEL=DEBUG
      - DATABASE_TYPE=postgresql
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ../../ai_core:/app/ai_core:ro
      - ../../src:/app/src:ro
      - ../../requirements.txt:/app/requirements.txt:ro
      - ../../config:/app/config:ro
      - high_volume_data:/app/data
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ai_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    restart: unless-stopped

  # 🤖 Intelligent Analyzer Worker - Updated with Python 3
  intelligent-analyzer:
    image: python:3.11-slim
    command: >
      bash -c "
      echo '🤖 Starting Intelligent Analyzer...' &&
      export DEBIAN_FRONTEND=noninteractive &&
      apt-get update && apt-get install -y --no-install-recommends curl gcc g++ python3-dev python3-pip && 
      python3 -m pip install --no-cache-dir --upgrade pip &&
      python3 -m pip install --no-cache-dir -r requirements.txt &&
      sleep 15 &&
      python3 -m src.agents.intelligent_analyzer
      "
    container_name: intelligent_crawl4ai_analyzer
    working_dir: /app
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://scraper_user:secure_password_123@postgres:5432/intelligent_scraping
      - OLLAMA_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL=deepseek-coder:1.3b
      - CHROMADB_URL=http://chromadb:8000
      - BROWSER_POOL_URLS=http://browser-pool-1:3000,http://browser-pool-2:3000
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app:/app/src
      - LOG_LEVEL=DEBUG
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ../../ai_core:/app/ai_core:ro
      - ../../src:/app/src:ro
      - ../../requirements.txt:/app/requirements.txt:ro
      - ../../config:/app/config:ro
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ai_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # 📊 MCP Server - Updated with Python 3
  mcp-server:
    image: python:3.11-slim
    command: >
      bash -c "
      echo '📊 Starting MCP Server...' &&
      export DEBIAN_FRONTEND=noninteractive &&
      apt-get update && apt-get install -y --no-install-recommends curl gcc g++ python3-dev python3-pip && 
      python3 -m pip install --no-cache-dir --upgrade pip &&
      python3 -m pip install --no-cache-dir -r requirements.txt &&
      sleep 15 &&
      python3 -m src.mcp_servers.intelligent_scraper_mcp
      "
    container_name: intelligent_crawl4ai_mcp
    working_dir: /app
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://scraper_user:secure_password_123@postgres:5432/intelligent_scraping
      - OLLAMA_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL=deepseek-coder:1.3b
      - CHROMADB_URL=http://chromadb:8000
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app:/app/src
      - LOG_LEVEL=DEBUG
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ../../ai_core:/app/ai_core:ro
      - ../../src:/app/src:ro
      - ../../requirements.txt:/app/requirements.txt:ro
      - ../../config:/app/config:ro
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ai_network
    ports:
      - "8811:8811"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: intelligent_crawl4ai_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../../docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai_network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: intelligent_crawl4ai_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../../docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - ai_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Load Balancer for Browser Pools
  nginx:
    image: nginx:alpine
    container_name: intelligent_crawl4ai_nginx
    volumes:
      - ../../docker/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - browser-pool-1
      - browser-pool-2
    networks:
      - ai_network
    restart: unless-stopped

  # Database Migration Service (runs once)
  db-migrate:
    image: python:3.11-slim
    command: >
      bash -c "
      echo '🗄️ Running database migrations...' &&
      export DEBIAN_FRONTEND=noninteractive &&
      apt-get update && apt-get install -y --no-install-recommends curl gcc g++ postgresql-client python3-dev python3-pip && 
      python3 -m pip install --no-cache-dir sqlalchemy psycopg2-binary alembic &&
      sleep 20 &&
      python3 -c '
      from sqlalchemy import create_engine, text
      engine = create_engine(\"postgresql://scraper_user:secure_password_123@postgres:5432/intelligent_scraping\")
      with engine.connect() as conn:
          # Create tables if they don't exist
          conn.execute(text(\"\"\"
              CREATE TABLE IF NOT EXISTS extraction_jobs (
                  id SERIAL PRIMARY KEY,
                  job_id VARCHAR(255) UNIQUE NOT NULL,
                  urls TEXT[],
                  purpose VARCHAR(255),
                  status VARCHAR(50),
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              CREATE TABLE IF NOT EXISTS extracted_data (
                  id SERIAL PRIMARY KEY,
                  job_id VARCHAR(255),
                  url TEXT,
                  data JSONB,
                  success BOOLEAN,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              CREATE INDEX IF NOT EXISTS idx_job_id ON extracted_data(job_id);
              CREATE INDEX IF NOT EXISTS idx_url ON extracted_data(url);
          \"\"\"))
          conn.commit()
          print(\"✅ Database tables created successfully!\")
      '
      "
    environment:
      - POSTGRES_URL=postgresql://scraper_user:secure_password_123@postgres:5432/intelligent_scraping
      - DEBIAN_FRONTEND=noninteractive
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ai_network
    restart: "no"

volumes:
  chromadb_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  high_volume_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
