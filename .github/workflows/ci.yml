name: CI

on:
  push:
    branches: [ main, develop, ai-first-architecture ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort mypy flake8 pylint
          
      - name: Run Black
        run: black --check --diff .
        
      - name: Run isort
        run: isort --check-only --diff .
        
      - name: Run Flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
      - name: Run MyPy
        run: mypy --install-types --non-interactive --ignore-missing-imports .
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout
          
      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb" >> .env
          echo "OLLAMA_URL=http://localhost:11434" >> .env
          echo "TESTING=true" >> .env
          
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=ai_core --cov-report=xml --cov-report=html --timeout=300
        env:
          PYTHONPATH: ${{ github.workspace }}
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  ai-test:
    name: AI Architecture Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sudo -E sh
          
      - name: Start Ollama service
        run: |
          ollama serve &
          sleep 5
          
      - name: Pull AI model
        run: |
          ollama pull deepseek-coder:1.3b
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          
      - name: Run AI-specific tests
        run: |
          pytest tests/test_ai_architecture.py tests/test_ollama_planning.py -v
        env:
          PYTHONPATH: ${{ github.workspace }}
          OLLAMA_URL: http://localhost:11434

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r ai_core/ web_ui_server.py -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
