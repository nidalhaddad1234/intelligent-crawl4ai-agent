name: Scheduled Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_learning:
        description: 'Force learning routine'
        required: false
        type: boolean
        default: false

jobs:
  learning-routine:
    name: AI Learning Routine
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sudo -E sh
          ollama serve &
          sleep 5
          ollama pull deepseek-coder:1.3b
          
      - name: Run learning routine
        run: |
          python -c "
          import asyncio
          import os
          from ai_core.enhanced_adaptive_planner import EnhancedAdaptivePlanner
          
          async def run_learning():
              planner = EnhancedAdaptivePlanner(model_name='deepseek-coder:1.3b')
              
              # Get learning stats
              stats = await planner.get_learning_stats()
              print(f'Learning Stats: {stats}')
              
              # Run learning routine if needed
              if ${{ github.event.inputs.force_learning }} or stats.get('days_since_last_training', 1) >= 1:
                  print('Running learning routine...')
                  report = await planner.run_learning_routine()
                  print(f'Learning Report: {report}')
              else:
                  print('Learning routine not needed today')
          
          asyncio.run(run_learning())
          "
          
      - name: Generate performance report
        run: |
          python -c "
          from ai_core.enhanced_adaptive_planner import EnhancedAdaptivePlanner
          
          planner = EnhancedAdaptivePlanner(model_name='deepseek-coder:1.3b')
          
          # Get tool insights
          insights = planner.get_tool_insights()
          print('=== Tool Performance Insights ===')
          for category, data in insights.items():
              print(f'\n{category}:')
              print(data)
          
          # Get recommendations
          recommendations = planner.suggest_new_capabilities()
          print('\n=== Capability Recommendations ===')
          for rec in recommendations:
              print(f'- {rec}')
          "
          
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const days = 7;
            const ms_per_day = 24 * 60 * 60 * 1000;
            const now = Date.now();
            const cutoff = now - (days * ms_per_day);
            
            const repos = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            for (const artifact of repos.data.artifacts) {
              if (Date.parse(artifact.created_at) < cutoff) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }

  dependency-check:
    name: Check for Outdated Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Check for outdated packages
        run: |
          pip install pip-outdated
          echo "## Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          pip-outdated requirements.txt >> $GITHUB_STEP_SUMMARY || echo "All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
